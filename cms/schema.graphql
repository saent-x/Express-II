# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  posts: PostManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForUpdateInput
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForCreateInput
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type Timetable {
  id: ID!
  game: String
  day: String
  closingtime: DateTime
  drawtime: DateTime
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input TimetableWhereUniqueInput {
  id: ID
}

input TimetableWhereInput {
  AND: [TimetableWhereInput!]
  OR: [TimetableWhereInput!]
  NOT: [TimetableWhereInput!]
  id: IDFilter
  game: StringFilter
  day: StringFilter
  closingtime: DateTimeNullableFilter
  drawtime: DateTimeNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input TimetableOrderByInput {
  id: OrderDirection
  game: OrderDirection
  day: OrderDirection
  closingtime: OrderDirection
  drawtime: OrderDirection
}

input TimetableUpdateInput {
  game: String
  day: String
  closingtime: DateTime
  drawtime: DateTime
}

input TimetableUpdateArgs {
  where: TimetableWhereUniqueInput!
  data: TimetableUpdateInput!
}

input TimetableCreateInput {
  game: String
  day: String
  closingtime: DateTime
  drawtime: DateTime
}

type Winninghistory {
  id: ID!
  operator: String
  game: String
  date: DateTime
  result: String
  optionA: String
  optionB: String
  optionC: String
}

input WinninghistoryWhereUniqueInput {
  id: ID
}

input WinninghistoryWhereInput {
  AND: [WinninghistoryWhereInput!]
  OR: [WinninghistoryWhereInput!]
  NOT: [WinninghistoryWhereInput!]
  id: IDFilter
  operator: StringFilter
  game: StringFilter
  date: DateTimeNullableFilter
  result: StringFilter
  optionA: StringFilter
  optionB: StringFilter
  optionC: StringFilter
}

input WinninghistoryOrderByInput {
  id: OrderDirection
  operator: OrderDirection
  game: OrderDirection
  date: OrderDirection
  result: OrderDirection
  optionA: OrderDirection
  optionB: OrderDirection
  optionC: OrderDirection
}

input WinninghistoryUpdateInput {
  operator: String
  game: String
  date: DateTime
  result: String
  optionA: String
  optionB: String
  optionC: String
}

input WinninghistoryUpdateArgs {
  where: WinninghistoryWhereUniqueInput!
  data: WinninghistoryUpdateInput!
}

input WinninghistoryCreateInput {
  operator: String
  game: String
  date: DateTime
  result: String
  optionA: String
  optionB: String
  optionC: String
}

type Game {
  id: ID!
  name: String
  drawtime: DateTime
  optionA: String
  optionB: String
  optionC: String
  numbers: String
}

input GameWhereUniqueInput {
  id: ID
}

input GameWhereInput {
  AND: [GameWhereInput!]
  OR: [GameWhereInput!]
  NOT: [GameWhereInput!]
  id: IDFilter
  name: StringFilter
  drawtime: DateTimeNullableFilter
  optionA: StringFilter
  optionB: StringFilter
  optionC: StringFilter
  numbers: StringFilter
}

input GameOrderByInput {
  id: OrderDirection
  name: OrderDirection
  drawtime: OrderDirection
  optionA: OrderDirection
  optionB: OrderDirection
  optionC: OrderDirection
  numbers: OrderDirection
}

input GameUpdateInput {
  name: String
  drawtime: DateTime
  optionA: String
  optionB: String
  optionC: String
  numbers: String
}

input GameUpdateArgs {
  where: GameWhereUniqueInput!
  data: GameUpdateInput!
}

input GameCreateInput {
  name: String
  drawtime: DateTime
  optionA: String
  optionB: String
  optionC: String
  numbers: String
}

type Hotnumber {
  id: ID!
  image: ImageFieldOutput
  title: String
  drawtime: DateTime
  option: String
  numbers: String
  redirect: String
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input HotnumberWhereUniqueInput {
  id: ID
}

input HotnumberWhereInput {
  AND: [HotnumberWhereInput!]
  OR: [HotnumberWhereInput!]
  NOT: [HotnumberWhereInput!]
  id: IDFilter
  title: StringFilter
  drawtime: DateTimeNullableFilter
  option: StringFilter
  numbers: StringFilter
  redirect: StringFilter
}

input HotnumberOrderByInput {
  id: OrderDirection
  title: OrderDirection
  drawtime: OrderDirection
  option: OrderDirection
  numbers: OrderDirection
  redirect: OrderDirection
}

input HotnumberUpdateInput {
  image: ImageFieldInput
  title: String
  drawtime: DateTime
  option: String
  numbers: String
  redirect: String
}

input ImageFieldInput {
  upload: Upload!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input HotnumberUpdateArgs {
  where: HotnumberWhereUniqueInput!
  data: HotnumberUpdateInput!
}

input HotnumberCreateInput {
  image: ImageFieldInput
  title: String
  drawtime: DateTime
  option: String
  numbers: String
  redirect: String
}

type Post {
  id: ID!
  title: String
  status: String
  content: Post_content_Document
  publishDate: DateTime
  author: User
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  status: StringNullableFilter
  publishDate: DateTimeNullableFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
}

input PostUpdateInput {
  title: String
  status: String
  content: JSON
  publishDate: DateTime
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  status: String
  content: JSON
  publishDate: DateTime
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createTimetable(data: TimetableCreateInput!): Timetable
  createTimetables(data: [TimetableCreateInput!]!): [Timetable]
  updateTimetable(
    where: TimetableWhereUniqueInput!
    data: TimetableUpdateInput!
  ): Timetable
  updateTimetables(data: [TimetableUpdateArgs!]!): [Timetable]
  deleteTimetable(where: TimetableWhereUniqueInput!): Timetable
  deleteTimetables(where: [TimetableWhereUniqueInput!]!): [Timetable]
  createWinninghistory(data: WinninghistoryCreateInput!): Winninghistory
  createWinninghistories(data: [WinninghistoryCreateInput!]!): [Winninghistory]
  updateWinninghistory(
    where: WinninghistoryWhereUniqueInput!
    data: WinninghistoryUpdateInput!
  ): Winninghistory
  updateWinninghistories(data: [WinninghistoryUpdateArgs!]!): [Winninghistory]
  deleteWinninghistory(where: WinninghistoryWhereUniqueInput!): Winninghistory
  deleteWinninghistories(
    where: [WinninghistoryWhereUniqueInput!]!
  ): [Winninghistory]
  createGame(data: GameCreateInput!): Game
  createGames(data: [GameCreateInput!]!): [Game]
  updateGame(where: GameWhereUniqueInput!, data: GameUpdateInput!): Game
  updateGames(data: [GameUpdateArgs!]!): [Game]
  deleteGame(where: GameWhereUniqueInput!): Game
  deleteGames(where: [GameWhereUniqueInput!]!): [Game]
  createHotnumber(data: HotnumberCreateInput!): Hotnumber
  createHotnumbers(data: [HotnumberCreateInput!]!): [Hotnumber]
  updateHotnumber(
    where: HotnumberWhereUniqueInput!
    data: HotnumberUpdateInput!
  ): Hotnumber
  updateHotnumbers(data: [HotnumberUpdateArgs!]!): [Hotnumber]
  deleteHotnumber(where: HotnumberWhereUniqueInput!): Hotnumber
  deleteHotnumbers(where: [HotnumberWhereUniqueInput!]!): [Hotnumber]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  timetables(
    where: TimetableWhereInput! = {}
    orderBy: [TimetableOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Timetable!]
  timetable(where: TimetableWhereUniqueInput!): Timetable
  timetablesCount(where: TimetableWhereInput! = {}): Int
  winninghistories(
    where: WinninghistoryWhereInput! = {}
    orderBy: [WinninghistoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Winninghistory!]
  winninghistory(where: WinninghistoryWhereUniqueInput!): Winninghistory
  winninghistoriesCount(where: WinninghistoryWhereInput! = {}): Int
  games(
    where: GameWhereInput! = {}
    orderBy: [GameOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Game!]
  game(where: GameWhereUniqueInput!): Game
  gamesCount(where: GameWhereInput! = {}): Int
  hotnumbers(
    where: HotnumberWhereInput! = {}
    orderBy: [HotnumberOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Hotnumber!]
  hotnumber(where: HotnumberWhereUniqueInput!): Hotnumber
  hotnumbersCount(where: HotnumberWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
